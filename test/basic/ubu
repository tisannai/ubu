#!/usr/bin/guile -s
!#

(add-to-load-path "../../lib")
(use-modules (ubu))

(ubu-load (cat (getcwd) "/" "ubu-lib/ubu-utils.scm"))


(action-help
 ""
 "  Build utility for: ubu testing"
 ""
 "    Usage:"
 "      ubu <opts-and-cmds>"
 ""
 "    Options:"
 "      -p          Run in parallel (default: serial)"
 "      -v          Verbose"
 ""
 "    Actions:"
 "      help            This help."
 "      compile         GCC compile"
 "      link            GCC link"
 "      build           GCC compile and link"
 "      clean           Cleanup"
 ""
 ""
 "  Copyright (c) 2019, Tero Isannainen"
 "")

(cli-map

 '(opt
   (p :parallel)
   (q :quiet))

 '(par
   (ll :log-level))

 '(act
   (ua ubu-actions)
   (h  help)
   (cl clean)
   (c  compile)
   (l  link)
   (b  build)))



(set "hello-source-dir" "src")
(set "hello-target-dir" "build")
(set "hello-exe" "bin/hello")
(set "gcc-opt" false)


(let ((c-files (get-files (glu "/" (get "hello-source-dir") "*.c"))))
  (set "hello-source-files" c-files)
  (set "hello-target-files" (map-files
                             c-files
                             'dir (get "hello-target-dir")
                             'ext ".o")))

(action setup-dirs
        (use-dir "build" "bin"))

(action compile
        (gcc-compile-files 
         (get "hello-source-files")
         (get "hello-target-files")))

(action link
        (gcc-link-files 
         (get "hello-target-files")
         (get "hello-exe")))

(action build
        (compile)
        (link))

(action clean
        (sh "rm -f build/* bin/*"))

(action dist-clean
        (clean)
        (sh "rm -rf build bin"))


(ubu-pre-run "setup-dirs")

(ubu-run-cli)
